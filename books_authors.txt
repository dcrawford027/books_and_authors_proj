In [1]: from books_authors_app.models import Book, Author

In [2]: Book.objects.create(title="C Sharp", desc="A coding book on C#")                                                            
Out[2]: <Book: Book object (1)>

In [3]: Book.objects.create(title="Java", desc="A coding book on Java")                                                             
Out[3]: <Book: Book object (2)>

In [4]: Book.objects.create(title="Python", desc="A coding book on Python")                                                         
Out[4]: <Book: Book object (3)>

In [5]: Book.objects.create(title="PHP", desc="A coding book on PHP")                                                               
Out[5]: <Book: Book object (4)>

In [6]: Book.objects.create(title="Ruby", desc="A coding book on Ruby")                                                             
Out[6]: <Book: Book object (5)>

In [7]: Author.objects.create(first_name="Jane", last_name="Austen")                                                                
Out[7]: <Author: Author object (1)>

In [8]: Author.objects.create(first_name="Emily", last_name="Dickinson")                                                            
Out[8]: <Author: Author object (2)>

In [9]: Author.objects.create(first_name="Fyodor", last_name="Dostoevsky")                                                          
Out[9]: <Author: Author object (3)>

In [10]: Author.objects.create(first_name="William", last_name="Shakespeare")                                                       
Out[10]: <Author: Author object (4)>

In [11]: Author.objects.create(first_name="Lau", last_name="Tzu")                                                                   
Out[11]: <Author: Author object (5)>

(djangoPy3Env) dustincrawford@Dustins-MacBook-Pro books_authors_proj % python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> "none"
Migrations for 'books_authors_app':
  books_authors_app/migrations/0003_author_notes.py
    - Add field notes to author
(djangoPy3Env) dustincrawford@Dustins-MacBook-Pro books_authors_proj % python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0003_author_notes... OK

In [2]: cSharp = Book.objects.get(id=1)                                                                                             

In [3]: cSharp.title = "C#"                                                                                                         

In [4]: cSharp.save()

In [5]: bill = Author.objects.get(id=4)                                                                                             

In [6]: bill.first_name = "Bill"                                                                                                    

In [7]: bill.save()


In [8]: jane = Author.objects.get(id=1)                                                                                             

In [9]: java = Book.objects.get(id=2)                                                                                               

In [10]: jane.books.add(cSharp)                                                                                                     

In [11]: jane.books.add(java)


In [13]: emily = Author.objects.get(id=2)                                                                                           

In [14]: py = Book.objects.get(id=3)                                                                                                

In [15]: emily.books.add(cSharp, java, py)


In [18]: fyodor = Author.objects.get(id=3)                                                                                          

In [19]: php = Book.objects.get(id=4)                                                                                               

In [20]: cSharp.authors.add(fyodor)                                                                                                 

In [21]: java.authors.add(fyodor)                                                                                                   

In [22]: py.authors.add(fyodor)                                                                                                     

In [23]: php.authors.add(fyodor)


In [26]: ruby = Book.objects.get(id=5)                                                                                              

In [27]: bill.books.add(cSharp, java, py, php, ruby)                                                                                                                                                                                       


In [29]: py.authors.all().values()                                                                                                  
Out[29]: <QuerySet [{'id': 2, 'first_name': 'Emily', 'last_name': 'Dickinson', 'notes': 'none', 'created_at': datetime.datetime(2020, 7, 16, 18, 43, 14, 377860, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 43, 14, 377890, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Fyodor', 'last_name': 'Dostoevsky', 'notes': 'none', 'created_at': datetime.datetime(2020, 7, 16, 18, 43, 56, 318713, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 43, 56, 318760, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': 'none', 'created_at': datetime.datetime(2020, 7, 16, 18, 44, 34, 565524, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 52, 37, 337962, tzinfo=<UTC>)}]>


In [31]: py.authors.first()                                                                                                         
Out[31]: <Author: Author object (2)>


In [33]: lau = Author.objects.get(id=5)                                                                                             

In [34]: java.authors.add(lau)


In [35]: fyodor.books.all().values()                                                                                                
Out[35]: <QuerySet [{'id': 1, 'title': 'C#', 'desc': 'A coding book on C#', 'created_at': datetime.datetime(2020, 7, 16, 18, 37, 42, 50949, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 51, 13, 666558, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': 'A coding book on Java', 'created_at': datetime.datetime(2020, 7, 16, 18, 38, 48, 799108, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 38, 48, 799138, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'A coding book on Python', 'created_at': datetime.datetime(2020, 7, 16, 18, 39, 19, 842169, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 39, 19, 842216, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'A coding book on PHP', 'created_at': datetime.datetime(2020, 7, 16, 18, 39, 57, 83145, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 39, 57, 83193, tzinfo=<UTC>)}]>


In [36]: ruby.authors.all().values()                                                                                                
Out[36]: <QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': 'none', 'created_at': datetime.datetime(2020, 7, 16, 18, 44, 34, 565524, tzinfo=<UTC>), 'updated_at': datetime.datetime(2020, 7, 16, 18, 52, 37, 337962, tzinfo=<UTC>)}]>